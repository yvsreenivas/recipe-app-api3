---------------------Dockerfile
FROM python:3.7-alpine
MAINTAINER Bengal App Devops

ENV PYTHONUNBUFFERED 1

RUN mkdir /app
WORKDIR /app
COPY ./app /app

COPY ./requirements.txt /requirements.txt
RUN pip install -r /requirements.txt

RUN adduser -D user
USER user

-------------------requirements.txt
Django>=3.1.4,<3.2.0
djangorestframework>=3.12.2,<=3.13.0

flake8>=3.8.4,<3.9.0

-----------------docker-compose.yml
version: "3"

services:
  app:
    build:
      context: .
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    command: >
      sh -c run app "python manage.py runserver 0.0.0.0:8000"

---------.travis.yml
language: python
python:
  - "3.6"

services:
  - docker

before_script: pip install docker compose

script:
  - docker-compose run app sh -c "python manage.py test && flake8"

------------.flake8
[flake8]
exclude =
  migrations,
  settings,
  __pycache__,
  manage.py

  ---------------------Steps
    create github repo
    configure travis
    clone from github
    create Dockerfile
    create an app folder in root
    and then
    create requirements.txt
    create docker-compose.yml
    command : docker build .
    docker-compose run app sh -c "django-admin.py startproject app"
    docker-compose run app sh -c "django-admin.py startapp core"
    add core to Installed apps in settings.py
    remove views.py and
    remove tests.py
    create a folder tests in core
    create a file __init__.py in core/tests
    create a test_models.py in this test folder
    create .travis.yml
    create .flake8 in app
    -------------tests_models.py
    create a test for create_user_using_email_successfull in test_file
    from django.test import TestCase
    from django.contrib.auth import get_user_model

    create class ModelTest(TestCase):

      def create_user_email_successfully(self):
        email = "test@email.com"
        password = "test123"
        user = get_user_model().objects.create_user(
          email=email,
          password=password
        )

      self.assertEquals(user.email, email)
      self.assertTrue(user.check_password(password))


    -----------------models.py
    from django.db import models
    from django.contrib,auth.models import AbstractBaseUser, BaseUserManager, PermissionMixin

    class UserManager(BaseUserManager):

      def create_user(self, email, password=None, **extra_fields):
        """Create new user """
        if not email:
          raise ValueError("New users must provide an email address")

        user = self.model(email = normalize_email(email), **extra_fields )
        user.set_password(password)

        user.save(using=self._db)

        return user

      def create_super_user(self, email, password):
        user = self.create_user(email, password)
        user.is_staff = True
        user.is_superuser = True

        user.save(using=self._db)

        return user

    class User(AbstractBaseUser, PermissionMixin):
      name = models.Charfield(max_length=255)
      email = models.EmailField(max_length=255, unique=True)
      is_active = models.BooleanField(default=True)
      is_staff = models.BooleanField(default=False)

      objects = UserManager()

      USERNAME_FILED = 'email'


      -----------------------settings
      last line add
      AUTH_USER_MODEL = 'core.User'
